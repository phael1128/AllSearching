// Generated by Dagger (https://dagger.dev).
package com.woojoo.allsearching.domain.usecases;

import com.woojoo.allsearching.domain.repository.ResearchingRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UpdateResearchingUseCase_Factory implements Factory<UpdateResearchingUseCase> {
  private final Provider<ResearchingRepository> researchingRepositoryProvider;

  public UpdateResearchingUseCase_Factory(
      Provider<ResearchingRepository> researchingRepositoryProvider) {
    this.researchingRepositoryProvider = researchingRepositoryProvider;
  }

  @Override
  public UpdateResearchingUseCase get() {
    return newInstance(researchingRepositoryProvider.get());
  }

  public static UpdateResearchingUseCase_Factory create(
      Provider<ResearchingRepository> researchingRepositoryProvider) {
    return new UpdateResearchingUseCase_Factory(researchingRepositoryProvider);
  }

  public static UpdateResearchingUseCase newInstance(ResearchingRepository researchingRepository) {
    return new UpdateResearchingUseCase(researchingRepository);
  }
}
