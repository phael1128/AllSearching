// Generated by Dagger (https://dagger.dev).
package com.woojoo.allsearching.domain.usecases;

import com.woojoo.allsearching.domain.repository.SearchResultRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SearchResultUseCase_Factory implements Factory<SearchResultUseCase> {
  private final Provider<SearchResultRepository> searchResultRepositoryProvider;

  public SearchResultUseCase_Factory(
      Provider<SearchResultRepository> searchResultRepositoryProvider) {
    this.searchResultRepositoryProvider = searchResultRepositoryProvider;
  }

  @Override
  public SearchResultUseCase get() {
    return newInstance(searchResultRepositoryProvider.get());
  }

  public static SearchResultUseCase_Factory create(
      Provider<SearchResultRepository> searchResultRepositoryProvider) {
    return new SearchResultUseCase_Factory(searchResultRepositoryProvider);
  }

  public static SearchResultUseCase newInstance(SearchResultRepository searchResultRepository) {
    return new SearchResultUseCase(searchResultRepository);
  }
}
